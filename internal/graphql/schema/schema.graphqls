# GraphQL schema for CRM Communication API

scalar UUID
scalar Time

# User represents a system user who can interact with clients
type User {
  id: UUID!
  name: String!
  email: String!
  role: String!
  createdAt: Time!
  updatedAt: Time!
}

# Client represents a customer in the CRM system
type Client {
  id: UUID!
  name: String!
  email: String!
  phone: String
  company: String
  notes: String
  createdAt: Time!
  updatedAt: Time!
  # Relations
  messages: [Message!]
  emails: [Email!]
  timeline: [TimelineEvent!]
}

# Message represents a chat message in the system
type Message {
  id: UUID!
  content: String!
  sender: User!
  client: Client!
  mentions: [User!]
  createdAt: Time!
  updatedAt: Time!
}

# Email represents an email message in the system
type Email {
  id: UUID!
  subject: String!
  content: String!
  sender: User!
  client: Client!
  attachments: [String!]
  createdAt: Time!
  updatedAt: Time!
}

# TimelineEvent represents an activity in the client timeline
type TimelineEvent {
  id: UUID!
  eventType: String!
  description: String!
  client: Client!
  user: User!
  relatedEntity: String # ID of related message, email, etc.
  createdAt: Time!
}

# Auth represents authentication information
type Auth {
  token: String!
  refreshToken: String!
  user: User!
}

# Input types for mutations
input RegisterInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input GoogleLoginInput {
  idToken: String!
}

input CreateClientInput {
  name: String!
  email: String!
  phone: String
  company: String
  notes: String
}

input UpdateClientInput {
  id: UUID!
  name: String
  email: String
  phone: String
  company: String
  notes: String
}

input CreateMessageInput {
  content: String!
  clientId: UUID!
  mentions: [UUID!]
}

input CreateEmailInput {
  subject: String!
  content: String!
  clientId: UUID!
  attachments: [String!]
}

# Queries
type Query {
  # User queries
  me: User!
  users: [User!]!
  user(id: UUID!): User

  # Client queries
  clients: [Client!]!
  client(id: UUID!): Client

  # Message queries
  messages(clientId: UUID!): [Message!]!
  message(id: UUID!): Message

  # Email queries
  emails(clientId: UUID!): [Email!]!
  email(id: UUID!): Email

  # Timeline queries
  timeline(clientId: UUID!): [TimelineEvent!]!
}

# Mutations
type Mutation {
  # Auth mutations
  register(input: RegisterInput!): Auth!
  login(input: LoginInput!): Auth!
  googleLogin(input: GoogleLoginInput!): Auth!
  refreshToken(token: String!): Auth!

  # Client mutations
  createClient(input: CreateClientInput!): Client!
  updateClient(input: UpdateClientInput!): Client!
  deleteClient(id: UUID!): Boolean!

  # Message mutations
  createMessage(input: CreateMessageInput!): Message!
  deleteMessage(id: UUID!): Boolean!

  # Email mutations
  createEmail(input: CreateEmailInput!): Email!
  deleteEmail(id: UUID!): Boolean!
}

# Subscriptions for real-time updates
type Subscription {
  # Subscribe to new messages for a specific client
  messageCreated(clientId: UUID!): Message!
  
  # Subscribe to new emails for a specific client
  emailCreated(clientId: UUID!): Email!
  
  # Subscribe to timeline events for a specific client
  timelineEventCreated(clientId: UUID!): TimelineEvent!
}