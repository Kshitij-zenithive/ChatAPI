package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"crm-communication-api/internal/graphql/generated"
	"crm-communication-api/internal/graphql/model"
	"fmt"

	"github.com/google/uuid"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// GoogleLogin is the resolver for the googleLogin field.
func (r *mutationResolver) GoogleLogin(ctx context.Context, input model.GoogleLoginInput) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: GoogleLogin - googleLogin"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// CreateClient is the resolver for the createClient field.
func (r *mutationResolver) CreateClient(ctx context.Context, input model.CreateClientInput) (*model.Client, error) {
	panic(fmt.Errorf("not implemented: CreateClient - createClient"))
}

// UpdateClient is the resolver for the updateClient field.
func (r *mutationResolver) UpdateClient(ctx context.Context, input model.UpdateClientInput) (*model.Client, error) {
	panic(fmt.Errorf("not implemented: UpdateClient - updateClient"))
}

// DeleteClient is the resolver for the deleteClient field.
func (r *mutationResolver) DeleteClient(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteClient - deleteClient"))
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input model.CreateMessageInput) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: CreateMessage - createMessage"))
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMessage - deleteMessage"))
}

// CreateEmail is the resolver for the createEmail field.
func (r *mutationResolver) CreateEmail(ctx context.Context, input model.CreateEmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: CreateEmail - createEmail"))
}

// DeleteEmail is the resolver for the deleteEmail field.
func (r *mutationResolver) DeleteEmail(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEmail - deleteEmail"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Clients is the resolver for the clients field.
func (r *queryResolver) Clients(ctx context.Context) ([]*model.Client, error) {
	panic(fmt.Errorf("not implemented: Clients - clients"))
}

// Client is the resolver for the client field.
func (r *queryResolver) Client(ctx context.Context, id uuid.UUID) (*model.Client, error) {
	panic(fmt.Errorf("not implemented: Client - client"))
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context, clientID uuid.UUID) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// Message is the resolver for the message field.
func (r *queryResolver) Message(ctx context.Context, id uuid.UUID) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: Message - message"))
}

// Emails is the resolver for the emails field.
func (r *queryResolver) Emails(ctx context.Context, clientID uuid.UUID) ([]*model.Email, error) {
	panic(fmt.Errorf("not implemented: Emails - emails"))
}

// Email is the resolver for the email field.
func (r *queryResolver) Email(ctx context.Context, id uuid.UUID) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Timeline is the resolver for the timeline field.
func (r *queryResolver) Timeline(ctx context.Context, clientID uuid.UUID) ([]*model.TimelineEvent, error) {
	panic(fmt.Errorf("not implemented: Timeline - timeline"))
}

// MessageCreated is the resolver for the messageCreated field.
func (r *subscriptionResolver) MessageCreated(ctx context.Context, clientID uuid.UUID) (<-chan *model.Message, error) {
	panic(fmt.Errorf("not implemented: MessageCreated - messageCreated"))
}

// EmailCreated is the resolver for the emailCreated field.
func (r *subscriptionResolver) EmailCreated(ctx context.Context, clientID uuid.UUID) (<-chan *model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailCreated - emailCreated"))
}

// TimelineEventCreated is the resolver for the timelineEventCreated field.
func (r *subscriptionResolver) TimelineEventCreated(ctx context.Context, clientID uuid.UUID) (<-chan *model.TimelineEvent, error) {
	panic(fmt.Errorf("not implemented: TimelineEventCreated - timelineEventCreated"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
